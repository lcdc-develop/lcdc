{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting started","text":"<p>LCDC: Light curve dataset creator is a Python package that allows you to work with large light curve datasets in a simple and efficient way. It is designed to be used creation of dataset for machine learning models as it produces output in <code>datasets.Dataset</code> format. Also it is a powerful tool for data preprocessing and scientific analysis on whole populations.</p> <p>It is sutaible for working with MMT_snapshot dataset created from MMT database <sup>1</sup>.</p>"},{"location":"#instalation","title":"Instalation","text":"<pre><code>git clone https://github.com/lcdc-develp/lcdc\ncd lcdc\npip install .\n</code></pre>"},{"location":"#simple-example","title":"Simple Example","text":"<pre><code>from lcdc import DatasetBuilder\nfrom lcdc import vars\nfrom lcdc import utils\nimport lcdc.preprocessing as pp\nimport lcdc.stats as stats\n\ndb = DatasetBuilder(DATA_PATH, norad_ids=[IDX])\npreprocessing = [\n    pp.FilterByPeriodicity(vars.Variability.PERIODIC),\n    pp.SplitByRotationalPeriod(1), \n    pp.FilterMinLength(100),\n    pp.FilterFolded(100, 0.8), \n]\n\ndb.preprocess(preprocessing)\ndataset = db.build_dataset()\nprint(dataset)\n</code></pre> <pre><code>Loaded 402 track\nPreprocessing: 100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 402/402 [00:08&lt;00:00, 49.28it/s]\nDataset({\n    features: ['norad_id', 'id', 'period', 'timestamp', 'time', 'mag', 'phase', 'distance', 'filter', 'name', 'variability', 'label', 'range'],\n    num_rows: 4057\n})\n</code></pre> <ol> <li> <p>Karpov, S., et al. \"Mini-Mega-TORTORA wide-field monitoring system with sub-second temporal resolution: first year of operation.\" Revista Mexicana de Astronom\u00eda y Astrof\u00edsica 48 (2016): 91-96.\u00a0\u21a9</p> </li> </ol>"},{"location":"modules/","title":"Modules","text":"<p>Documentation for the <code>lcdc</code> package and its submodules.</p>"},{"location":"modules/#datasetbuilder","title":"DatasetBuilder","text":"<p><code>DatasetBuilder</code> is the main entrypoint class that holds the data and provides methods for data preprocessing and dataset creation.</p>"},{"location":"modules/#datasetbuilder_1","title":"<code>DatasetBuilder</code>","text":"<p><code>DatasetBuilder.__init__(directory: str, classes: List[str]=[], regexes: List[str]=[], norad_ids: List[int]=None)</code></p> <p>Parameters</p> <ul> <li><code>directory</code> (str): The data directory.</li> <li><code>classes</code> (List[str], optional): A list of class names (default is an empty list).</li> <li><code>regexes</code> (List[str], optional): A list of regex patterns corresponding to the classes (default is an empty list).</li> <li><code>norad_ids</code> (List[int], optional): A list of NORAD IDs to filter the data (default is None). </li> </ul>"},{"location":"modules/#datasetbuilderpreprocess","title":"<code>DatasetBuilder.preprocess</code>","text":"<p><code>DatasetBuilder.preprocess</code>(ops: List[callable]=[])</p> <p>Applies preprocessing operations to the dataset.</p> <p>Parameters</p> <ul> <li><code>ops</code> (List[callable], optional): List of preprocessing operations to apply (default is an empty list). </li> </ul>"},{"location":"modules/#datasetbuilderbuild_dataset","title":"<code>DatasetBuilder.build_dataset</code>","text":"<p><code>DatasetBuilder.build_dataset(split_ratio: float=None) -&gt; Union[Dataset, List[Dataset]]</code></p> <p>Builds the dataset, optionally splitting it into training and testing sets.</p> <p>Parameters</p> <ul> <li><code>split_ratio</code> (float, optional): The ratio for splitting the dataset (default is None).</li> </ul> <p>Returns</p> <ul> <li><code>datasets</code> (Union[Dataset, List[Dataset]]): The built dataset or a pair of train and test datasets if <code>split_ratio</code> is provided. </li> </ul>"},{"location":"modules/#datasetbuilderto_file","title":"<code>DatasetBuilder.to_file</code>","text":"<p><code>DatasetBuilder.to_file(path: str)</code></p> <p>Saves the dataset to a Parquet file.</p> <p>Parameters</p> <ul> <li><code>path</code> (str): The path to save the Parquet file. </li> </ul>"},{"location":"modules/#datasetbuilderfrom_file","title":"<code>DatasetBuilder.from_file</code>","text":"<p><code>DatasetBuilder.from_file(path: str) -&gt; DatasetBuilder</code></p> <p>Loads a DatasetBuilder from a .parquet file.</p> <p>Parameters</p> <ul> <li><code>path</code> (str): The path to the Parquet file.</li> </ul> <p>Returns</p> <ul> <li><code>instance</code> (DatasetBuilder): The DatasetBuilder with the loaded dataset. </li> </ul>"},{"location":"modules/#stats","title":"<code>stats</code>","text":"<p><code>stats</code> is a module that provides functions for computing statistics on the light curves. The computed statistics are stored in the records as a new field.</p>"},{"location":"modules/#amplitude","title":"<code>Amplitude</code>","text":"<p><code>Amplitude()</code></p> <p>Computes the amplitude as difference between maximal and minimal value of standartized magnitude. Returns results are stored in record's \"Amplitude\" field.</p>"},{"location":"modules/#mediumtime","title":"<code>MediumTime</code>","text":"<p><code>MediumTime()</code></p> <p>Computes the medium time of a given record. Returns results are stored in record's \"MediumTime\" field.</p>"},{"location":"modules/#mediumphase","title":"<code>MediumPhase</code>","text":"<p><code>MediumPhase()</code></p> <p>Computes the medium phase angle of a given record. Returns results are stored in record's \"MediumPhase\" field.</p>"},{"location":"modules/#fourierseries","title":"<code>FourierSeries</code>","text":"<p><code>FourierSeries(order: int, fs: bool=True, covariance: bool=True, amplitude: bool=True)</code></p> <p>Parameters</p> <ul> <li><code>order</code> (int): The order of the Fourier series.</li> <li><code>fs</code> (bool, optional): Whether to compute and store Fourier coefficients (default is True).</li> <li><code>covariance</code> (bool, optional): Whether to compute and store Fourier covariance (default is True).</li> <li><code>amplitude</code> (bool, optional): Whether to compute and store Fourier amplitude (default is True).</li> </ul> <p>Returns results are stored in record's \"FourierCoefs\" \"FourierAmplitude\" and \"FourierCovariance\" fields. The \"FourierCovariance\" matrix is stored in flatten version as 1D array of size [order+1 x order+1].</p>"},{"location":"modules/#continouswavelettransform","title":"<code>ContinousWaveletTransform</code>","text":"<p><code>ContinousWaveletTransform(wavelet: str, length: int, scales: int)</code></p> <p>Computes the Continuous Wavelet Transform (CWT) of a given record using the PyWavelet package.</p> <p>Parameters</p> <ul> <li><code>wavelet</code> (str): The type of wavelet to use for the CWT.</li> <li><code>length</code> (int): The length of the signal to transform.</li> <li><code>scales</code> (int): The number of scales to use for the CWT.</li> </ul> <p>Returns flatten results of size [length x scales] stored in record's \"CWT\" field. </p>"},{"location":"modules/#preprocessing","title":"<code>preprocessing</code>","text":""},{"location":"modules/#filters","title":"Filters","text":"<p>Filters filter the records based on the criteria implemented in its <code>condition(record)</code> method.</p>"},{"location":"modules/#filterfolded","title":"<code>FilterFolded</code>","text":"<p><code>FilterFolded(k:int=100, threshold:float=0.5)</code></p> <p>Filters records if its folded light curve has a certain threshold of non-zero values.</p> <p>Parameters</p> <ul> <li><code>k</code> (int, optional): The size of the folded light curve (default is 100).</li> <li><code>threshold</code> (float, optional): The minimal ratio of non-zero measurements in the folded light curve (default is 0.5).</li> </ul>"},{"location":"modules/#filterminlength","title":"<code>FilterMinLength</code>","text":"<p>FilterMinLength(length: int, step: float = None)</p> <p>Filters records if the light curve length is at least <code>length</code>.</p> <p>Parameters</p> <ul> <li><code>length</code> (int): Minimal length of the light curve.</li> <li><code>step</code> (float, optional): Time step used for length computation is <code>None</code> the number of measurements is used as the length (default is None).</li> </ul>"},{"location":"modules/#filterbyperiodicity","title":"<code>FilterByPeriodicity</code>","text":"<p><code>FilterByPeriodicity(types: List[Variability])</code></p> <p>Filters records based on the variability type.</p> <p>Parameters</p> <ul> <li><code>types</code> (List[Variability]): List of lcdc.vars.Variability types to filter.</li> </ul>"},{"location":"modules/#filterbystartdate","title":"<code>FilterByStartDate</code>","text":"<p><code>FilterByStartDate(year, month, day, hour=0, minute=0, second=0)</code></p> <p>Filters out records created before the specified start date.</p> <p>Parameters</p> <ul> <li>year (int): The year of the start date.</li> <li>month (int): The month of the start date.</li> <li>day (int): The day of the start date.</li> <li>hour (int, optional): The hour of the start date (default is 0).</li> <li>minute (int, optional): The minute of the start date (default is 0).</li> <li>second (int|float, optional): The second of the start date (default is 0).</li> </ul>"},{"location":"modules/#filterbyenddate","title":"<code>FilterByEndDate</code>","text":"<p><code>FilterByEndDate(year, month, day, hour=0, minute=0, second=0)</code></p> <p>Filters out records created after the specified end date.</p> <p>Parameters</p> <ul> <li>year (int): The year of the end date.</li> <li>month (int): The month of the end date.</li> <li>day (int): The day of the end date.</li> <li>hour (int, optional): The hour of the end date (default is 0).</li> <li>minute (int, optional): The minute of the end date (default is 0).</li> <li>second (int|float, optional): The second of the end date (default is 0).</li> </ul>"},{"location":"modules/#filterbynorad","title":"<code>FilterByNorad</code>","text":"<p><code>FilterByNorad(norad_list: List[int])</code></p> <p>Filters records based on the NORAD ID.</p> <p>Parameters</p> <ul> <li><code>norad_list</code> (List[int]): List of allowed NORAD IDs.</li> </ul>"},{"location":"modules/#splitting","title":"Splitting","text":"<p>Splitting operations are used to split one light curve into multiple records based on some methodology.</p>"},{"location":"modules/#splitbygaps","title":"<code>SplitByGaps</code>","text":"<p><code>SplitByGaps(max_length: int=None)</code></p> <p>SplitByGaps splits the light curve into parts if the time  difference between two consecutive measurements is greater than the apparent rotational period.</p> <p>For non-periodic light curves, the split wont be performed.</p> <p>Parameters</p> <ul> <li>max_length (int, optional): The maximum length of a part in seconds. Defaults to None. If its defined, multiple parts can be merged togethe if their sum of lengths is less than max_length.</li> </ul>"},{"location":"modules/#splitbyrotationalperiod","title":"<code>SplitByRotationalPeriod</code>","text":"<p><code>SplitByRotationalPeriod(period: float)</code></p> <p>SplitByRotationalPeriod splits the light curve into individual rotational periods.  For non-periodic light curves, the split wont be performed.</p> <p>Parameters</p> <ul> <li>multiple (int, optional): The light curve is split by <code>multitiple</code> times.</li> </ul>"},{"location":"modules/#splitbysize","title":"<code>SplitBySize</code>","text":"<p><code>SplitBySize(max_length: float, uniform: bool=False)</code></p> <p>SplitBySize splits the light curve into parts of a fixed size.</p> <p>Parameters</p> <ul> <li>max_length (int): The maximum length of a part in seconds.  uniform (bool, optional): If True, the parts will have the same length &lt;= max_length. Defaults to False.</li> </ul>"},{"location":"modules/#transformations","title":"Transformations","text":"<p>Transformations modify the original samples in some way.</p>"},{"location":"modules/#fold","title":"<code>Fold</code>","text":"<p><code>Fold()</code></p> <p>Fold class is a transformation folds the light curve by its apparent rotational period. Does not apply for non-variable or aperiodic light curves.</p> <p>Influenced fields: <code>time</code>, <code>mag</code>, <code>phase</code>, <code>distance</code>, <code>filter</code></p>"},{"location":"modules/#togrid","title":"<code>ToGrid</code>","text":"<p><code>ToGrid(sampling_frequency: float, size: int)</code> ToGrid class is a transformation that resamples the light curve by <code>sampling_frequency</code>. The result is padded / truncated  to a fixed size.</p> <p>Influenced fields: <code>time</code>, <code>mag</code>, <code>phase</code>, <code>distance</code>, <code>filter</code></p> <p>Parameters</p> <ul> <li>sampling_frequency (float): The resampling frequency [Hz].</li> <li>size (int): The fixed size of the resampled light curve.</li> </ul>"},{"location":"modules/#dropcolumns","title":"<code>DropColumns</code>","text":"<p><code>DropColumns(columns: List[str])</code></p> <p>DropColumns removes field specified in the <code>columns</code> parameter.</p> <p>Parameters</p> <ul> <li>columns (List[str]): List of columns to drop.</li> </ul>"},{"location":"modules/#vars","title":"<code>vars</code>","text":"<p>Contains convenience Enum classes and other constants.</p>"},{"location":"modules/#variability","title":"<code>Variability</code>","text":"<p><code>Variability</code> is a String Enum class for the variability types.</p> Name Value <code>PERIODIC</code> 'periodic' <code>APERIODIC</code> 'aperiodic' <code>NONVARIABLE</code> 'non-variable'"},{"location":"modules/#tablecols","title":"<code>TableCols</code>","text":"<p><code>TableCols</code> is a String Enum class for the table basic table columns.</p> Name Value Description <code>ID</code> 'id' track id <code>NORAD_ID</code> 'norad_id' object norad id <code>TIMESTAMP</code> 'timestamp' timestamp of the measurement <code>PERIOD</code> 'period' apparent rotational period <code>TIME</code> 'time' list of time measurements <code>MAG</code> 'mag' list of standartized magnitude measurements <code>PHASE</code> 'phase' list of phase angle measurements <code>DISTANCE</code> 'distance' list of distance measurements <code>FILTER</code> 'filter' list of filter measurements <code>VARIABILITY</code> 'variability' object variability type <code>NAME</code> 'name' object name <code>LABEL</code> 'label' class label <code>RANGE</code> 'range' index range of original measurements"},{"location":"modules/#filter","title":"<code>Filter</code>","text":"<p><code>Filter</code> is a Int Enum class for the filter types.</p> Name Value <code>UNKNOWN</code> 0 <code>CLEAR</code> 1 <code>POL</code> 2 <code>V</code> 4 <code>R</code> 8 <code>B</code> 16"},{"location":"modules/#data_cols","title":"<code>DATA_COLS</code>","text":"<p><code>DATA_COLS</code> is a list of list columns namely: \"time\", \"mag\", \"phase\", \"distance\", \"filter\".</p>"},{"location":"modules/#utils","title":"<code>utils</code>","text":"<p>Module <code>utils</code> contains utility and vizualization functions.</p>"},{"location":"modules/#plot_track","title":"<code>plot_track</code>","text":"<p><code>plot_track(record: Dict[str, Any]) -&gt; [matplotlib.figure.Figure, matplotlib.axes.Axes]</code></p> <p>Plots the light curve of a given record if data is present. Present fields:</p> <ul> <li>\"mag\" - plots magnitude vs. time</li> <li>\"FourierCoefs\" - plots reconstructed magnitude vs. time and residuals</li> <li>\"phase\" - plots phase vs. time</li> <li>\"mag\" and \"phase\" - plots magnitude vs. phase</li> <li>\"distance\" - plots distance vs. time</li> </ul>"},{"location":"modules/#datetime_to_sec","title":"<code>datetime_to_sec</code>","text":"<p><code>datetime_to_sec(datetime: string) -&gt; float</code> </p> <p>Converts datetime in format \"%Y-%m-%d %H:%M:%S\" to seconds since epoch.</p>"},{"location":"modules/#sec_to_datetime","title":"<code>sec_to_datetime</code>","text":"<p><code>sec_to_datetime(seconds: float) -&gt; string</code></p> <p>Converts seconds since epoch to datetime in format \"%Y-%m-%d %H:%M:%S\".</p>"},{"location":"modules/#get_fourier_series","title":"<code>get_fourier_series</code>","text":"<p><code>get_fourier_series(order: int, period: float = 1) -&gt; Tuple[np.ndarray, np.ndarray, np.ndarray]</code></p> <p>Creates a Fourier series function with given order and period.</p> <p>Parameters</p> <ul> <li>order (int): The order of the Fourier series.</li> <li>period (float, optional): The period of the Fourier series (default is 1).</li> </ul> <p>Returns</p> <ul> <li><code>func</code>: Function func(x, coefs) </li> </ul>"},{"location":"modules/#fourier_series_fit","title":"<code>fourier_series_fit</code>","text":"<p><code>fourier_series_fit(order: int, record: Dict[str, Any], period: float = 1) -&gt; Tuple[np.ndarray, np.ndarray]</code></p> <p>Fits a Fourier series to the given record.</p> <p>Parameters</p> <ul> <li>order (int): The order of the Fourier series.</li> <li>record (Dict[str, Any]): The record to fit the Fourier series to.</li> <li>period (float, optional): The period of the Fourier series (default is 1).</li> </ul> <p>Returns - <code>coefs</code> (Array[order+1 x 1]): The Fourier coefficients. - <code>covariance_matrix</code> (Array[order+1 x order+1]): The covariance matrix of coeficients.</p>"},{"location":"quick_start/","title":"Quick Start","text":""},{"location":"quick_start/#installation","title":"Installation","text":""},{"location":"quick_start/#mmt-snapshot","title":"MMT snapshot","text":""},{"location":"quick_start/#usage","title":"Usage","text":"<p>...</p>"}]}